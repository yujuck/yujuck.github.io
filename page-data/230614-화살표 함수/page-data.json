{"componentChunkName":"component---src-templates-post-jsx","path":"/230614-화살표 함수/","result":{"data":{"site":{"siteMetadata":{"title":"yujuck"}},"markdownRemark":{"id":"d5bc8388-fcb4-5a4f-ab35-c04b308719aa","excerpt":"ES6 이전의 함수 ES6 이전까지의 자바스크립트 함수는 로서 호출할 수도 있고, new 연산자와 함께 호출하여 인스턴스를 생성할 수 있는 로서 호출할 수도 있으며, 객체에 바인딩되어 할 수도 있다. 이러한 특징은 편리한 것 같지만 사용 목적에 따라 명확히 구분되지 않아 실수를 유발할 수도 있고 성능면에서도 문제가 있다. ES6 이전의 모든 함수는 일반 …","html":"<h2>ES6 이전의 함수</h2>\n<p>ES6 이전까지의 자바스크립트 함수는 <code class=\"language-text\">일반적인 함수</code>로서 호출할 수도 있고, new 연산자와 함께 호출하여 인스턴스를 생성할 수 있는 <code class=\"language-text\">생성자 함수</code>로서 호출할 수도 있으며, 객체에 바인딩되어 <code class=\"language-text\">메서드로서 호출</code>할 수도 있다. 이러한 특징은 편리한 것 같지만 사용 목적에 따라 명확히 구분되지 않아 실수를 유발할 수도 있고 성능면에서도 문제가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 일반적인 함수로서 호출</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token comment\">// 생성자 함수로서 호출</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// func {}</span>\n\n<span class=\"token comment\">// 메서드로서 호출</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">myFunction</span><span class=\"token operator\">:</span> func <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ES6 이전의 모든 함수는 일반 함수로서 호출할 수 있으면서 생성자 함수로서 호출할 수 있다. 이것은 callable이면서 constructor라는걸 의미한다. 객체에 바인딩된 함수(메서드) 또한 문법상으로는 객체에 바인딩된 함수를 생성자 함수로 호출할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">f</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// f에 바인딩된 함수를 메서드로서 호출</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// f에 바인딩된 함수를 일반 함수로서 호출</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token comment\">// f에 바인딩된 함수를 생성자 함수로서 호출</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">obj<span class=\"token punctuation\">.</span>f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f {}</span></code></pre></div>\n<p>이렇게 되면 성능에서도 문제가 있는 게, 객체에 바인딩된 함수가 constructor라는 것은\n객체에 바인딩된 함수가 prototype 프로퍼티를 가지며, 프로토타입 객체도 생성한다는 것을 의미하기 때문이다.</p>\n<p>이렇게 사용 목적에 따라 명확한 구분이 없어 생기는 문제를 해결하기 위해 ES6에서는 함수를 사용 목적에 따라 구분한다.</p>\n<h2>화살표 함수 (Arrow Function)</h2>\n<p>ES6에서 처음 도입된 화살표 함수의 사용법은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">x</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span></code></pre></div>\n<h3>일반 함수와의 차이</h3>\n<ol>\n<li>인스턴스를 생성할 수 없는 non-constructor</li>\n</ol>\n<p>화살표 함수는 인스턴스를 생성할 수 없으므로 prototype 프로퍼티가 없고 프로토타입도 생성하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError: func is not a constructor</span></code></pre></div>\n<ol start=\"2\">\n<li>중복된 매개변수 이름을 선언할 수 없음</li>\n</ol>\n<p>일반 함수는 중복된 매개변수 이름을 선언해도 에러가 발생하지 않는다. (처음 알았다. 이렇게 써본 적이 없어서..)\nstrict mode에서는 에러가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">normal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">normal</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></code></pre></div>\n<p>화살표 함수는 strict mode가 아니여도 중복된 매개변수 이름을 선언하면 에러가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">arrow</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SyntaxError</span></code></pre></div>\n<ol start=\"3\">\n<li>함수 자체의 this, arguments, super, new.target 바인딩을 갖지 않음</li>\n</ol>\n<p>화살표 함수 내부에서 this, arguments, super, new.target을 참조하면 스코프 체인을 통해 상위 스코프의 것을 참조한다. 화살표 함수가 콜백 함수 내부에서 this가 전역 객체를 가리키는 문제를 해결하기 위한 대안으로 유용한 이유이다.</p>\n<p>만약에 화살표 함수가 중첩되어 있다면 상위 화살표 함수에도 this, arguments 등의 바인딩이 없으므로 스코프 체인 상에서 가장 가까운 함수 중 화살표 함수가 아닌 함수의 것을 참조한다.</p>\n<h3>this</h3>\n<p>화살표 함수와 일반 함수를 구분했을 때 가장 큰 차이점은 this다.<br>\n화살표 함수는 함수 자체의 this 바인딩을 갖지 않는다. 그렇기 때문에 화살표 함수 내부에서 this를 참조하면 상위 스코프의 this를 그대로 참조한다.\n이를 <code class=\"language-text\">lexical this</code> 라고 하고, 화살표 함수의 this가 함수가 정의된 위치에 의해 결정된다는 것을 의미한다.</p>\n<p>this가 상위 스코프의 this를 참조하기 때문에 메서드를 화살표 함수로 정의하는 것은 좋지 않다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yujuck\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">func</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hi </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hi</span></code></pre></div>\n<p>'hi' 만 출력되는 이유는 func에서 참조하는 this는 전역 객체를 가리키기 때문이다.</p>\n<p>원하는대로 객체의 name 프로퍼티를 가져오려면 다음과 같이 ES6 메서드 축약 표현으로 정의한 ES6 메서드를 사용하는 것이 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yujuck\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hi </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hi</span></code></pre></div>\n<h3>super, arguments</h3>\n<p>super와 arguments도 this와 마찬가지로 화상표 함수 내부에서 super, arguments를 참조하면 상위 스코프의 super, arguments를 참조한다.</p>\n<p>arguments의 경우 화살표 함수에서는 arguments 객체를 사용할 수 없다.<br>\n상위 스코프의 arguments 객체를 참조할 수는 있지만 화살표 함수에게 전달된 인수 목록을 확인할 수 없고 상위 함수에게 전달된 인수 목록을 참조하기 때문이다.\n따라서 화살표 함수로 가변 인자 함수를 구현해야 할 경우, Rest 파라미터를 사용해야한다.</p>","frontmatter":{"title":"화살표 함수 (ES6)","date":"June 14, 2023","update":"June 14, 2023","tags":["javascript","ES6"],"series":"ECMAscript"},"fields":{"slug":"/230614-화살표 함수/","readingTime":{"minutes":6.815}}},"seriesList":{"edges":[{"node":{"id":"bb80bc1a-1967-57d4-95cf-592ae1bf2c27","fields":{"slug":"/230613-ES6 문법 1탄/"},"frontmatter":{"title":"ES6(ECMAScript 6)와 let, const 키워드"}}},{"node":{"id":"d5bc8388-fcb4-5a4f-ab35-c04b308719aa","fields":{"slug":"/230614-화살표 함수/"},"frontmatter":{"title":"화살표 함수 (ES6)"}}},{"node":{"id":"2dea0a26-ea03-5860-b50c-7fa288627b0f","fields":{"slug":"/230615-스프레드 연산자/"},"frontmatter":{"title":"스프레드 연산자 (ES6)"}}},{"node":{"id":"6c379ff9-271c-56a8-a6e1-bafa51f270b7","fields":{"slug":"/230616-for...of 반복문/"},"frontmatter":{"title":"for...of 반복문 (ES6)"}}},{"node":{"id":"1852b773-e5bb-52ee-942b-6da2a16f4a22","fields":{"slug":"/230622-Map/"},"frontmatter":{"title":"Map (ES6)"}}}]},"previous":{"fields":{"slug":"/230613-ES6 문법 1탄/"},"frontmatter":{"title":"ES6(ECMAScript 6)와 let, const 키워드"}},"next":{"fields":{"slug":"/230615-스프레드 연산자/"},"frontmatter":{"title":"스프레드 연산자 (ES6)"}}},"pageContext":{"id":"d5bc8388-fcb4-5a4f-ab35-c04b308719aa","series":"ECMAscript","previousPostId":"bb80bc1a-1967-57d4-95cf-592ae1bf2c27","nextPostId":"2dea0a26-ea03-5860-b50c-7fa288627b0f"}},"staticQueryHashes":[]}