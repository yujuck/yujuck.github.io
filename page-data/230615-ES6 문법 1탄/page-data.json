{"componentChunkName":"component---src-templates-post-jsx","path":"/230615-ES6 문법 1탄/","result":{"data":{"site":{"siteMetadata":{"title":"yujuck"}},"markdownRemark":{"id":"7a2eaf37-bdd8-5ce4-abfd-f9c18a5e6fdb","excerpt":"지금은 기본 중의 기본이 되어있는 ES6인데 글을 쓰는 이유는..? ES6 이후에 나온 내용들도 한번 쭉 보고 싶어서 시리즈로 만들기 위해 적어보려고 한다! ECMAScript? ES? Ecma International이 기술 규격에 따라 정의하고 있는 표준화된 스크립트 프로그래밍 언어 Javascript는 Netscape 회사의 Brendan Eich …","html":"<p>지금은 기본 중의 기본이 되어있는 ES6인데 글을 쓰는 이유는..?<br>\nES6 이후에 나온 내용들도 한번 쭉 보고 싶어서 시리즈로 만들기 위해 적어보려고 한다!</p>\n<h2>ECMAScript? ES?</h2>\n<blockquote>\n<p>Ecma International이 <code class=\"language-text\">ECMA-262</code>기술 규격에 따라 정의하고 있는 표준화된 스크립트 프로그래밍 언어</p>\n</blockquote>\n<p>Javascript는 Netscape 회사의 Brendan Eich 라는 사람에 의해 최초로 개발되었다. 그 후 Javascript의 성공에 자극을 받은 마이크로소프트는 Jscript 라는 언어를 개발하고 IE에 지원되기 시작했다.<br>\n두 스크립트가 서로 호환되지 못하는 경우가 생기게 되면서 표준화가 요구되었고, ECMA-262의 이름으로 1996년 11월부터 시작됐다.</p>\n<p><code class=\"language-text\">ES</code>는 <code class=\"language-text\">ECMAScript의 약자</code>다. 헷갈릴 수 있는 게 <code class=\"language-text\">ES6</code>는 ES016이 아니라 <code class=\"language-text\">ES2015</code>와 <code class=\"language-text\">동일</code>하다.\n현재는 ES6보다 더 많은 버전이 나와있는데도 최신 버전의 내용보다 ES6의 내용을 중요하게 보는 데에는 이유가 있다.</p>\n<p>먼저, ES6에 추가된 개념들이 ES6 이하 버전에서 문제가 되었던 부분들이 해결되고 많은 기능이 추가되어 현재까지도 중요한 개념들이기 때문이다. 그리고 구버전의 웹 브라우저나 레거시 코드와의 호환성 문제가 있어 대부분의 기업들이 ES6까지를 호환성의 최대치로 보고 있다고 한다.</p>\n<h2>ES6 하나씩 알아보기</h2>\n<h3>let, const</h3>\n<p>이제는 너무 기본적인 <code class=\"language-text\">let</code> 과 <code class=\"language-text\">const</code>.</p>\n<p>블록 스코프의 변수 선언을 할 수 있게 되었다. var와의 가장 큰 차이점이 바로 함수 스코프가 아닌 블록 스코프 변수 선언이라는 것이다.</p>\n<p><code class=\"language-text\">let</code>과 <code class=\"language-text\">const</code>의 차이점은 const는 한번 초기화하면 다른 값을 정의할 수 없지만 let은 계속 값을 변경할 수 있다. 주의할 점은 const여도 객체나 배열의 요소의 변경을 막진 않는 다는 것이다.</p>\n<p>호이스팅에 대한 얘기도 무조건 나온다.</p>\n<p>var 키워드와 달리 let과 const는 변수 호이스팅이 발생하지 않는 것처럼 동작한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(x);  // ReferenceError\nlet x;</code></pre></div>\n<p>var 키워드로 선언했다면 위의 상황에서 ReferenceError가 아닌 undefined가 출력되었을 것이다.<br>\n<code class=\"language-text\">var</code> 키워드 변수는 런타임 이전에 선언 단계와 초기화 단계가 <code class=\"language-text\">한번에 진행</code>되는데,<br>\n<code class=\"language-text\">let</code> 키워드 변수는 선언 단계와 초기화 단계가 <code class=\"language-text\">분리되어 진행</code>된다.<br>\n즉, 런타임 이전에 선언 단계가 먼저 실행되지만 <code class=\"language-text\">초기화 단계는 변수 선언문에 도달했을 때 실행</code>된다.</p>\n<p>초기화 단계가 실행되기 이전에 변수에 접근하려고 하면 참조 에러(ReferenceError)가 발생한다.<br>\nlet 키워드 변수는 스코프 시작 지점부터 초기화 단계가 실행되는 변수 선언문까지는 변수를 참조할 수 없는데,\n이 구간을 <code class=\"language-text\">일시적 사각지대</code>(Temporal Dead Zone: TDZ) 라고 한다.</p>\n<p>위의 특성 때문에 변수 호이스팅이 발생하지 않는 것처럼 보이지만 그렇지는 않다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let x = 1;  // 전역변수\n{\n    console.log(x);  // ReferenceError\n    let x = 2;  // 지역변수\n}</code></pre></div>\n<p>변수 호이스팅이 발생하지 않는다면 위 예제는 전역 변수 x의 값을 출력해야하는데,\n그렇지 않고 ReferenceError가 발생한다.<br>\n-> 호이스팅이 발생했기 때문에 지역 변수 x의 존재를 알고 있지만 값이 초기화 되어있지 않아서 ReferenceError가 발생</p>\n<p>자바스크립트는 ES6에서 도입된 let, const를 포함해서 모든 선언(var, let ,const, function, class 등)을 호이스팅 한다.<br>\n단, ES6에서 도입된 let, const class를 사용한 선언문은 호이스팅이 발생하지 않는 것처럼 동작한다.</p>\n<h3>화살표 함수 (Arrow Function)</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ES5</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">x</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ES6</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">x</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span></code></pre></div>\n<p>화살표 함수의 가장 큰 특징은 <code class=\"language-text\">this</code>가 상위 스코프의 this로 유지가 된다는 것이다.\n항상 익명함수로 정의하고, 생성자 함수로 사용할 수도 없다. 또한 prototype 프로퍼티가 없고 arguments 객체를 생성하지 않는다는 특징이 있다.</p>\n<h3>스프레드 연산자 (Spread Operator)</h3>\n<p>스프레드 연산자 (...) 은 반복 가능한(iterable) 객체에 적용할 수 있는 문법이다. 배열, 문자열 등의 요소 하나하나를 spread 시켜주는 문법이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1, 2, 3, 4</span></code></pre></div>\n<p>스프레드 연산자는 여러 배열을 하나로 합칠 때도 유용하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"f\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr1<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['a', 'b', 'c', 'd', 'e', 'f']</span></code></pre></div>\n<p>객체도 iterable 하기 때문에 스프레드 연산자를 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>obj <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { a: 1 }</span></code></pre></div>\n<p>이때 깊은 복사 즉, obj와 obj2는 다른 주소값을 가지게 되는데(obj를 변경해도 obj2가 변하지 않음), 이런 깊은 복사는 1depth에 한해서만 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">87</span><span class=\"token punctuation\">,</span> <span class=\"token number\">56</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> maxValue <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>배열의 요소를 함수의 인자로 사용하려는 경우, 위처럼 작성할 수 있고</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 여러 번 사용할 수도 있다.</p>\n<p>참고</p>\n<ul>\n<li><a href=\"https://ko.wikipedia.org/wiki/ECMA%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8\">ECMA스크립트</a></li>\n<li><a href=\"https://velog.io/@krungy/ES6\">ES6</a></li>\n<li><a href=\"https://www.w3schools.com/js/js_es6.asp\">Javascript ES6</a></li>\n<li><a href=\"https://www.zerocho.com/category/ECMAScript\">ECMAScript</a></li>\n</ul>","frontmatter":{"title":"ES6(ECMAScript 6) 알아보기 - let, const, 화살표 함수, 스프레드 연산자","date":"June 15, 2023","update":"June 15, 2023","tags":["javascript","ES6"],"series":"ECMAscript"},"fields":{"slug":"/230615-ES6 문법 1탄/","readingTime":{"minutes":7.25}}},"seriesList":{"edges":[{"node":{"id":"7a2eaf37-bdd8-5ce4-abfd-f9c18a5e6fdb","fields":{"slug":"/230615-ES6 문법 1탄/"},"frontmatter":{"title":"ES6(ECMAScript 6) 알아보기 - let, const, 화살표 함수, 스프레드 연산자"}}}]},"previous":{"fields":{"slug":"/230612-crontab 설정을 해보자/"},"frontmatter":{"title":"crontab 설정을 해보자"}},"next":null},"pageContext":{"id":"7a2eaf37-bdd8-5ce4-abfd-f9c18a5e6fdb","series":"ECMAscript","previousPostId":"dbd2fcfc-e69c-59fb-9f10-0945a37f853d","nextPostId":null}},"staticQueryHashes":[]}