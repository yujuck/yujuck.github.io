{"componentChunkName":"component---src-templates-post-jsx","path":"/230616-for...of 반복문/","result":{"data":{"site":{"siteMetadata":{"title":"yujuck"}},"markdownRemark":{"id":"6c379ff9-271c-56a8-a6e1-bafa51f270b7","excerpt":"For...of for...of 문은 반복가능한 객체 (Array, Map, Set, String, TypedArray, arguments 객체 등을 포함)에 대해서 반복한다. 위와 같이 반복의 대상은 iterable해야 한다. iterable 하다는 것은 Symbol.iterator 속성을 가지고 있다는 것이다. for...in 과의 차이점이 for..…","html":"<h2>For...of</h2>\n<p>for...of 문은 반복가능한 객체 (Array, Map, Set, String, TypedArray, arguments 객체 등을 포함)에 대해서 반복한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>variable <span class=\"token keyword\">of</span> iterable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  statement<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 반복의 대상은 iterable해야 한다. iterable 하다는 것은 [Symbol.iterator] 속성을 가지고 있다는 것이다.</p>\n<p>for...in 과의 차이점이 for...in은 객체의 모든 열거 가능한 속성에 대해 반복하지만,<br>\nfor...of는 [Symbol.iterator] 속성을 가지는 것만 반복할 수 있다.</p>\n<p>for...of에서 index와 value를 같이 받아오고 싶은 경우에는 다음과 같이 작성하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> Iterable<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>성능 비교 ?</h3>\n<p>반복문에 대한 내용을 보다보면 꼭 성능에 대한 이야기가 나온다.\n가장 기본적인 for문 부터 forEach, for...in, while 등 반복문을 실행할 수 있는 것들이 많기 때문인데,\n성능 비교해놓은 것을 보면 for문이 다른 반복문에 비해 빠른 편(while도 비슷)이고 for...in이 제일 느린 편이다.</p>\n<p>for문이 제일 빠르니까 for문 써야지! 라기보단 상황에 맞춰 사용하는 것이 중요한 것 같다.\n예를 들어 continue, break를 써야한다면 forEach는 안쓴다던가..\n어떤 내용을 작성하는가에 따라 적절히 활요하면 될 것 같다.<br>\n근데 보통 for...in은 성능상 떨어지는 것 같아서 많이들 안쓰는 것 같긴 하다. 실제로 나도 별로 안쓰긴 하는 듯..?<br>\n나는 for...of나 for문을 많이 쓰는 것 같다.</p>","frontmatter":{"title":"for...of 반복문 (ES6)","date":"June 16, 2023","update":"June 16, 2023","tags":["javascript","ES6"],"series":"ECMAscript"},"fields":{"slug":"/230616-for...of 반복문/","readingTime":{"minutes":2}}},"seriesList":{"edges":[{"node":{"id":"bb80bc1a-1967-57d4-95cf-592ae1bf2c27","fields":{"slug":"/230613-ES6 문법 1탄/"},"frontmatter":{"title":"ES6(ECMAScript 6)와 let, const 키워드"}}},{"node":{"id":"d5bc8388-fcb4-5a4f-ab35-c04b308719aa","fields":{"slug":"/230614-화살표 함수/"},"frontmatter":{"title":"화살표 함수 (ES6)"}}},{"node":{"id":"2dea0a26-ea03-5860-b50c-7fa288627b0f","fields":{"slug":"/230615-스프레드 연산자/"},"frontmatter":{"title":"스프레드 연산자 (ES6)"}}},{"node":{"id":"6c379ff9-271c-56a8-a6e1-bafa51f270b7","fields":{"slug":"/230616-for...of 반복문/"},"frontmatter":{"title":"for...of 반복문 (ES6)"}}},{"node":{"id":"1852b773-e5bb-52ee-942b-6da2a16f4a22","fields":{"slug":"/230622-Map/"},"frontmatter":{"title":"Map (ES6)"}}}]},"previous":{"fields":{"slug":"/230615-스프레드 연산자/"},"frontmatter":{"title":"스프레드 연산자 (ES6)"}},"next":{"fields":{"slug":"/230622-Map/"},"frontmatter":{"title":"Map (ES6)"}}},"pageContext":{"id":"6c379ff9-271c-56a8-a6e1-bafa51f270b7","series":"ECMAscript","previousPostId":"2dea0a26-ea03-5860-b50c-7fa288627b0f","nextPostId":"1852b773-e5bb-52ee-942b-6da2a16f4a22"}},"staticQueryHashes":[]}