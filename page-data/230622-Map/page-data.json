{"componentChunkName":"component---src-templates-post-jsx","path":"/230622-Map/","result":{"data":{"site":{"siteMetadata":{"title":"yujuck"}},"markdownRemark":{"id":"1852b773-e5bb-52ee-942b-6da2a16f4a22","excerpt":"Map은 키-값 쌍으로 이루어진다. 키를 갖는다는 것에서 객체와 유사하지만 다른 점이 있다. Object Map 이터러블하지 않음 이터러블함 요소 개수 확인하는 프로퍼티 없음 size 프로퍼티로 요소 개수 확인 가능 string이나 Symbol만 키로 올 수 있음 모든 값이 키가 될 수 있음 순서가 보장되지 않음 삽입된 순서를 기억함 주요 메서드와 프로퍼…","html":"<p>Map은 키-값 쌍으로 이루어진다. 키를 갖는다는 것에서 객체와 유사하지만 다른 점이 있다.</p>\n<table>\n<thead>\n<tr>\n<th>Object</th>\n<th>Map</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>이터러블하지 않음</td>\n<td>이터러블함</td>\n</tr>\n<tr>\n<td>요소 개수 확인하는 프로퍼티 없음</td>\n<td>size 프로퍼티로 요소 개수 확인 가능</td>\n</tr>\n<tr>\n<td>string이나 Symbol만 키로 올 수 있음</td>\n<td>모든 값이 키가 될 수 있음</td>\n</tr>\n<tr>\n<td>순서가 보장되지 않음</td>\n<td>삽입된 순서를 기억함</td>\n</tr>\n</tbody>\n</table>\n<h2>주요 메서드와 프로퍼티</h2>\n<p>Map에서 사용되는 메서드와 프로퍼티들이다.</p>\n<ul>\n<li>new Map() : Map 객체 생성</li>\n<li>map.set(key, value) : key를 이용해 value 저장</li>\n<li>map.get(key) : key에 해당하는 value 반환. key가 없으면 undefined 반환</li>\n<li>map.has(key) : key 존재 여부 확인 (true/false 반환)</li>\n<li>map.delete(key) : key에 해당하는 값 삭제</li>\n<li>map.clear() : Map 안의 모든 요소 제거</li>\n<li>map.size : 요소 개수 반환</li>\n</ul>\n<h2>Map 객체 생성</h2>\n<p>Map 객체는 Map 생성자 함수로 생성할 수 있다.\n<code class=\"language-text\">이터러블</code>을 인수로 전달받아 Map 객체를 생성하고, 인수를 전달하지 않으면 빈 Map 객체가 생성된다.\n전달하는 이터러블은 키-값 쌍으로 이루어진 요소로 구성되어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> map1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 빈 Map 객체 생성</span>\n<span class=\"token keyword\">const</span> map2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> map3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError</span></code></pre></div>\n<p>Map은 중복된 키를 가질 수 없기 때문에 이미 생성한 키를 넣으면 덮어씌워진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Map(1) {1 => 5}</span></code></pre></div>\n<h2>요소 추가</h2>\n<p>Map.prototype.set 메서드를 사용해서 요소를 추가할 수 있다.<br>\nset 메서드를 사용하면 새로운 요소가 추가된 Map 객체를 반환하기 때문에 연속적으로 set 메서드를 호출할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Map(1) {\"key1\" => \"value1\"}</span>\n\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Map(1) {\"key1\" => \"value1\", \"key2\" => \"value2\", \"key3\" => \"value3\"}</span></code></pre></div>\n<p>모든 값이 key가 될 수 있는 Map의 특징에 의해 객체 또한 key가 될 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> lee <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Lee\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> kim <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Kim\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>kim<span class=\"token punctuation\">,</span> <span class=\"token string\">\"developer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>lee<span class=\"token punctuation\">,</span> <span class=\"token string\">\"singer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Map(1) { {name: \"Kim\"} => \"developer\", {name: \"Lee\"} => \"singer\" }</span></code></pre></div>\n<h2>요소 가져오기</h2>\n<p>Map.prototype.get 메서드로 key에 해당하는 value를 가져올 수 있다. 해당하는 key가 없는 경우에는 undefined가 반환된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> lee <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Lee\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> kim <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Kim\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>kim<span class=\"token punctuation\">,</span> <span class=\"token string\">\"developer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>lee<span class=\"token punctuation\">,</span> <span class=\"token string\">\"singer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>lee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// developer</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>object는 키를 문자형으로 변환을 하는데, Map은 변환시키지 않고 그대로 유지한다.\n그렇기 때문에 다음과 같은 경우 반환되는 값이 달라진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span></code></pre></div>\n<h2>요소 존재여부 확인</h2>\n<p>Map.prototype.has 메서드로 존재여부를 확인할 수 있다. true/false가 반환된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> lee <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Lee\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> kim <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Kim\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>kim<span class=\"token punctuation\">,</span> <span class=\"token string\">\"developer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>lee<span class=\"token punctuation\">,</span> <span class=\"token string\">\"singer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>lee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<h2>요소 삭제</h2>\n<p>Map.prototype.delete로 요소를 삭제할 수 있다. 삭제 성공 여부(true/false)가 반환된다.\ntrue/false가 반환되기 때문에 set과 다르게 연속적으로 호출할 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Map(1) {2 => 20}</span></code></pre></div>\n<p>존재하지 않는 key로 삭제하려고 하면 에러는 발생하지 않고 그냥 무시된다.</p>\n<h2>모든 요소 삭제</h2>\n<p>Map.prototype.clear 메서드로 모든 요소를 삭제할 수 있다. 언제나 undefined가 반환된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> lee <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Lee\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> kim <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Kim\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>kim<span class=\"token punctuation\">,</span> <span class=\"token string\">\"developer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>lee<span class=\"token punctuation\">,</span> <span class=\"token string\">\"singer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token function\">Map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2>요소 개수 확인</h2>\n<p>Map.prototype.size 프로퍼티를 사용하면 쉽게 요소의 개수를 가져올 수 있다.<br>\nObject의 경우에는 크기를 알려면 Object.keys(obj).length 처럼 key의 배열의 길이로 알아내는 방식을 사용해야하는데,\nMap에는 기본적으로 size라는 프로퍼티가 있어 요소의 개수를 바로 알아낼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> size <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<h2>요소 순회</h2>\n<p>Map.prototype.forEach 메서드를 사용해 요소를 순회할 수 있다. (Map이 따로 forEach 메서드를 갖는건 처음 알았다.)\n순회되는 순서는 삽입 순서에 따라 순회가 되어 먼저 삽입된 key부터 순회한다.\n콜백 함수와 콜백 함수를 실행하고 있을 때 this로 사용하는 값(optional)을 인자로 받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> map</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>이터러블</h3>\n<p>Object는 순회가 되지 않기 때문에 Object.keys(obj)로 for..of 실행해서 객체에 직접 접근해서 한다던가, entries를 사용한다. (Object.prototype.entries는 ES2017에 추가됨)<br>\n하지만 Map 객체는 Map 객체 자체가 이터러블하기 때문에 for...of 문을 통한 순회가 가능하다.<br>\n또한 스프레드 문법과 배열 디스트럭처링 할당의 대상이 될 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bb\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// object는 이터러블하지 않기 때문에 entries 메서드를 사용함</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> obj1<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bb\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// map 자체가 이터러블함</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>map<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [[\"a\", \"aa\"],[\"b\", \"bb\"]]</span></code></pre></div>\n<p>Map.prototype.keys, Map.prototype.values, Map.prototype.entries 메서드도 제공하고 있다.</p>\n<h2>Map to Object</h2>\n<p><code class=\"language-text\">Object.fromEntries()</code> 를 사용하여 Map 객체를 Object로 변환시킬 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">fromEntries</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {one: 1, two: 2}</span></code></pre></div>\n<h2>언제 활용해야할까?</h2>\n<p>사실 Map 객체를 잘 사용하고 있진 않다. 거의 Object를 사용하고 있는데, 이번 내용을 찾아보면서 언제 Map을 쓰면 되는걸까 찾아봤다.</p>\n<p>근데 대부분 그냥 Map의 특징과 엮어서 설명하고 있는 것 같다.<br>\n순서에 따라 반복문을 실행하고 싶을 때, key로 string, symbol외의 값을 사용하고 싶을 때 등의 상황에서 쓰면 된다.</p>\n<p>성능적으로는 MDN에 따르면 키-값 쌍의 빈번한 추가 및 제거와 관련된 상황에서는 Map이 성능이 좀 더 좋다고 한다.</p>\n<p>앞으로 코드 작업할 때 Map을 활용할 수 있는 상황이라면 Object 대신에 Map을 활용하는 쪽으로 작성해봐야겠다.\n맨날 익숙하게 쓰는 것만 쓰는 게 아쉬움..</p>\n<p>참고</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Map\">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Map</a></li>\n</ul>","frontmatter":{"title":"Map (ES6)","date":"June 22, 2023","update":"June 22, 2023","tags":["javascript","ES6"],"series":"ECMAscript"},"fields":{"slug":"/230622-Map/","readingTime":{"minutes":8.245}}},"seriesList":{"edges":[{"node":{"id":"bb80bc1a-1967-57d4-95cf-592ae1bf2c27","fields":{"slug":"/230613-ES6 문법 1탄/"},"frontmatter":{"title":"ES6(ECMAScript 6)와 let, const 키워드"}}},{"node":{"id":"d5bc8388-fcb4-5a4f-ab35-c04b308719aa","fields":{"slug":"/230614-화살표 함수/"},"frontmatter":{"title":"화살표 함수 (ES6)"}}},{"node":{"id":"2dea0a26-ea03-5860-b50c-7fa288627b0f","fields":{"slug":"/230615-스프레드 연산자/"},"frontmatter":{"title":"스프레드 연산자 (ES6)"}}},{"node":{"id":"6c379ff9-271c-56a8-a6e1-bafa51f270b7","fields":{"slug":"/230616-for...of 반복문/"},"frontmatter":{"title":"for...of 반복문 (ES6)"}}},{"node":{"id":"1852b773-e5bb-52ee-942b-6da2a16f4a22","fields":{"slug":"/230622-Map/"},"frontmatter":{"title":"Map (ES6)"}}},{"node":{"id":"56584063-2d11-546f-84db-86f48c15caec","fields":{"slug":"/230629.Set/"},"frontmatter":{"title":"Set (ES6)"}}}]},"previous":{"fields":{"slug":"/230616-for...of 반복문/"},"frontmatter":{"title":"for...of 반복문 (ES6)"}},"next":{"fields":{"slug":"/230627-이메일 인증 구현/"},"frontmatter":{"title":"회원가입, 비밀번호 찾기 이메일 인증 어떻게 하지?"}}},"pageContext":{"id":"1852b773-e5bb-52ee-942b-6da2a16f4a22","series":"ECMAscript","previousPostId":"6c379ff9-271c-56a8-a6e1-bafa51f270b7","nextPostId":"0283c2c5-0197-58dd-919a-d4099f79c560"}},"staticQueryHashes":[]}