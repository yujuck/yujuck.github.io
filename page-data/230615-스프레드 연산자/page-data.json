{"componentChunkName":"component---src-templates-post-jsx","path":"/230615-스프레드 연산자/","result":{"data":{"site":{"siteMetadata":{"title":"yujuck"}},"markdownRemark":{"id":"2dea0a26-ea03-5860-b50c-7fa288627b0f","excerpt":"스프레드 연산자 (...) 은 반복 가능한(iterable) 객체에 적용할 수 있는 문법이다. 배열, 문자열 등의 요소 하나하나를 spread(전개) 시켜주는 문법이다. 스프레드 연산자를 사용했을 때의 결과물은 값이 아닌 값들의 목록 이라고 할 수 있다. 그렇기 때문에 쉼표로 구분한 값의 목록을 사용하는 문맥에서 사용할 수 있다. 함수 호출문의 인수 목록…","html":"<p>스프레드 연산자 (...) 은 반복 가능한(iterable) 객체에 적용할 수 있는 문법이다. 배열, 문자열 등의 요소 하나하나를 spread(전개) 시켜주는 문법이다.</p>\n<p>스프레드 연산자를 사용했을 때의 결과물은 값이 아닌 값들의 목록 이라고 할 수 있다. 그렇기 때문에 쉼표로 구분한 값의 목록을 사용하는 문맥에서 사용할 수 있다.</p>\n<h2>함수 호출문의 인수 목록에서 사용</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">87</span><span class=\"token punctuation\">,</span> <span class=\"token number\">56</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> maxValue <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Math.max 메서드는 매개변수 개수를 확정할 수 없는 가변 인자 함수다. 인수로 전달받은 여러 개의 숫자 중에서 최대값을 반환해준다.<br>\nMath.max에 숫자가 아닌 배열을 인수로 전달하면 NaN을 반환한다.</p>\n<p>스프레드 연산자가 없었을 때에는</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 해야 사용이 가능했는데, 스프레드 연산자가 생기면서 훨씬 간결하게 작성할 수 있게 되었다.</p>\n<h2>배열 리터럴 내부에서 사용</h2>\n<p>ES5에서 2개의 배열을 하나로 합칠 때 concat 매서드를 사용해야 했다.<br>\n이를 ES6의 스프레드 연산자를 사용하면 간단하게 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"f\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ES5</span>\n<span class=\"token keyword\">const</span> result1 <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['a', 'b', 'c', 'd', 'e', 'f']</span>\n\n<span class=\"token comment\">// ES6</span>\n<span class=\"token keyword\">const</span> result2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr1<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['a', 'b', 'c', 'd', 'e', 'f']</span></code></pre></div>\n<p>배열 중간에 다른 배열의 요소를 추가할 때에도 쉽게 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\narr1<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>배열 복사 할 때에도 사용 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> origin <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>origin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"b\", \"c\"]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>origin <span class=\"token operator\">===</span> copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<h2>객체 리터럴의 프로퍼티 목록</h2>\n<p>객체도 iterable 하기 때문에 스프레드 연산자를 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>obj1 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { a: 1 }</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1 <span class=\"token operator\">===</span> obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token keyword\">const</span> obj3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> merged <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>obj3<span class=\"token punctuation\">,</span> obj4 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>merged<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { x: 1, y: 2, a: 3, b: 4}</span></code></pre></div>\n<p>위처럼 합칠 때만이 아니라 특정 프로퍼티의 변경 및 추가할 때도 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> changed <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>obj3<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>changed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { x: 3, y: 2}</span>\n\n<span class=\"token keyword\">const</span> added <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>obj4<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>added<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { a: 3, b: 4, c: 10}</span></code></pre></div>\n<p>객체와 배열 모두 복사했을 때 원본과 비교하면 false의 값이 나왔다.\n원본, 복사본은 다른 주소값을 갖기 때문에 원본을 변경해도 복사본에 영향이 없는데,<br>\n객체의 경우 객체 내부에 중첩된 객체를 갖고 있다면 해당 객체는 원본이 변경되면 복사본에서도 변경이 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> origin <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">first</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yujuck\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">last</span><span class=\"token operator\">:</span> <span class=\"token string\">\"kim\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>origin <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>origin <span class=\"token operator\">===</span> copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\norigin<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> <span class=\"token string\">\"lee\"</span><span class=\"token punctuation\">;</span>\norigin<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { name: {first: \"yujuck\", last: \"lee\"}, age: 10 };</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { name: {first: \"yujuck\", last: \"lee\"}, age: 1 };</span></code></pre></div>","frontmatter":{"title":"스프레드 연산자 (ES6)","date":"June 15, 2023","update":"June 15, 2023","tags":["javascript","ES6"],"series":"ECMAscript"},"fields":{"slug":"/230615-스프레드 연산자/","readingTime":{"minutes":4.02}}},"seriesList":{"edges":[{"node":{"id":"bb80bc1a-1967-57d4-95cf-592ae1bf2c27","fields":{"slug":"/230613-ES6 문법 1탄/"},"frontmatter":{"title":"ES6(ECMAScript 6)와 let, const 키워드"}}},{"node":{"id":"d5bc8388-fcb4-5a4f-ab35-c04b308719aa","fields":{"slug":"/230614-화살표 함수/"},"frontmatter":{"title":"화살표 함수 (ES6)"}}},{"node":{"id":"2dea0a26-ea03-5860-b50c-7fa288627b0f","fields":{"slug":"/230615-스프레드 연산자/"},"frontmatter":{"title":"스프레드 연산자 (ES6)"}}},{"node":{"id":"6c379ff9-271c-56a8-a6e1-bafa51f270b7","fields":{"slug":"/230616-for...of 반복문/"},"frontmatter":{"title":"for...of 반복문 (ES6)"}}},{"node":{"id":"1852b773-e5bb-52ee-942b-6da2a16f4a22","fields":{"slug":"/230622-Map/"},"frontmatter":{"title":"Map (ES6)"}}},{"node":{"id":"56584063-2d11-546f-84db-86f48c15caec","fields":{"slug":"/230629.Set/"},"frontmatter":{"title":"Set (ES6)"}}}]},"previous":{"fields":{"slug":"/230614-화살표 함수/"},"frontmatter":{"title":"화살표 함수 (ES6)"}},"next":{"fields":{"slug":"/230616-for...of 반복문/"},"frontmatter":{"title":"for...of 반복문 (ES6)"}}},"pageContext":{"id":"2dea0a26-ea03-5860-b50c-7fa288627b0f","series":"ECMAscript","previousPostId":"d5bc8388-fcb4-5a4f-ab35-c04b308719aa","nextPostId":"6c379ff9-271c-56a8-a6e1-bafa51f270b7"}},"staticQueryHashes":[]}